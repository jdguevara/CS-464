groundRender = 1;
snowRender = 1;
function webgl_init() {
    document.getElementById("shadingCLR").value = "phong";
    document.getElementById("lightingCLR").value = "phong";

    // attach 'Handler' functions to handle events generated by the canvas.
    // for when the browser is resized or closed.

    // first initialize webgl components 
    gl = initGLScene();
    initShaders();

    // Clock tower
    Tower = new Object(0,180,0,0,"tower");
    loadJSONResource('Models/betterClock.json', function (modelErr, modelObj) {
        if (modelErr) {
            alert('Fatal error getting clock tower model (see console)');
            console.error(fsErr);
        }
        Tower.initgeometryfromjson(modelObj,0,5,5,1.25)
    });
    temp = initTextures("images/abstract.jpg");
    Tower.bindTexture(temp);
    // Tower.bindAnimation(minuteHand);
    objects.push(Tower);

    // Minute hand
    hour = new Object(0,180,0,0,"hour");
    loadJSONResource('Models/clockHands.json', function (modelErr, modelObj) {
        if (modelErr) {
            alert('Fatal error getting minute hand model (see console)');
            console.error(fsErr);
        }
        hour.initgeometryfromjson(modelObj,0,17,7,0.12)
    });
    temp = initTextures("images/clockHands.png");
    hour.bindTexture(temp);
    hour.bindAnimation(hourHand);
    objects.push(hour);

    // Hour hand
    minute = new Object(0,180,0,0,"minute");
    loadJSONResource('Models/clockHands.json', function (modelErr, modelObj) {
        if (modelErr) {
            alert('Fatal error getting hour hand model (see console)');
            console.error(fsErr);
        }
        minute.initgeometryfromjson(modelObj,0,17,7,0.15)
    });
    temp = initTextures("images/clockHands.png");
    minute.bindTexture(temp);
    minute.bindAnimation(minuteHand);
    // Hour.orbitMode(true);
    objects.push(minute);

    // Sun object
    Sun = new Object(0,180,0,0,"sun");
    loadJSONResource('Models/sunAndMoon.json', function (modelErr, modelObj) {
        if (modelErr) {
            alert('Fatal error getting Sun model (see console)');
            console.error(fsErr);
        }
        Sun.initgeometryfromjson(modelObj,0,30,0,2)
    });
    temp = initTextures("images/sun2.jpg");
    Sun.bindTexture(temp);
    Sun.bindAnimation(sun);
    Sun.orbitMode(true);
    Sun.illumMode(true);
    objects.push(Sun);

    // Moon Object
    Moon = new Object(0,180,0,0,"moon");
    loadJSONResource('Models/sunAndMoon.json', function (modelErr, modelObj) {
        if (modelErr) {
            alert('Fatal error getting model (see console)');
            console.error(fsErr);
        }
        Moon.initgeometryfromjson(modelObj,0,30,0,1)
    });
    temp = initTextures("images/moon.png");
    Moon.bindTexture(temp);
    Moon.bindAnimation(moon);
    Moon.orbitMode(true);
    Moon.illumMode(true);
    objects.push(Moon);

    // Boulder Object
    Boulder = new Object(0,0,0,0,"boulder");
    loadJSONResource('Models/boulder.json', function (modelErr, modelObj) {
        if (modelErr) {
            alert('Fatal error getting boulder model (see console)');
            console.error(fsErr);
        }
        Boulder.initgeometryfromjson(modelObj,1,2,5,6)
    });
    temp = initTextures("images/grass.jpg");
    Boulder.bindTexture(temp);
    objects.push(Boulder);

    // Boulder Object
    lampBase = new Object(0,0,0,0,"lampBase");
    loadJSONResource('Models/lamp2.json', function (modelErr, modelObj) {
        if (modelErr) {
            alert('Fatal error getting lamp model (see console)');
            console.error(modelErr);
        }
        lampBase.initgeometryfromjson(modelObj,5,5,8,.5)
    });
    temp = initTextures("images/lamp.png");
    lampBase.bindTexture(temp);
    objects.push(lampBase);

    lampHead = new Object(0,0,0,0,"lampHead");
    loadJSONResource('Models/lamp2.json', function (modelErr, modelObj) {
        if (modelErr) {
            alert('Fatal error getting lamp model (see console)');
            console.error(modelErr);
        }
        lampHead.initgeometryfromjson(modelObj,5,5,8,.5,1)
    });
    temp = initTextures("images/lamp.png");
    lampHead.bindTexture(temp);
    objects.push(lampHead);

    lightbulb = new Object(0,180,-45,0,"lightBulb");
    loadJSONResource('Models/sunAndMoon.json', function (modelErr, modelObj) {
        if (modelErr) {
            alert('Fatal error getting Sun model (see console)');
            console.error(fsErr);
        }
        lightbulb.initgeometryfromjson(modelObj,4.025,9.75,8,.125)
    });
    temp = initTextures("images/sun2.jpg");
    lightbulb.bindTexture(temp);
    lightbulb.illumMode(true);
    objects.push(lightbulb);

    monkey = new Object(0,90,270,0,"monkey");
    loadJSONResource('Models/Susan.json', function (modelErr, modelObj) {
        if (modelErr) {
            alert('Fatal error getting lamp model (see console)');
            console.error(modelErr);
        }
        monkey.initgeometryfromjson(modelObj,0,3,8,.5)
    });
    temp = initTextures("images/SusanTexture.png");
    monkey.bindTexture(temp);
    monkey.bindAnimation(rotate);
    objects.push(monkey);

    if (snowRender) {
    var snowFlakeCount = 24;
    var snowflakes = [snowFlakeCount];
    for(x = 0; x < snowFlakeCount; x++)
    {
        snowflakes[x] = new Object(0,180,-45,0,"snowflake");
    }
    loadJSONResource('Models/snowflake.json', function (modelErr, modelObj) {
        if (modelErr) {
            alert('Fatal error getting Sun model (see console)');
            console.error(fsErr);
        }
        for(x = 0; x < snowFlakeCount; x++)
    {
        var xloc = (x-(snowFlakeCount/2))*1.5;
        var yloc = Math.floor(Math.random() * 50)+35;
        var zloc = Math.floor(Math.random() * 16);
        var scale = .875;
        snowflakes[x].initgeometryfromjson(modelObj,xloc,yloc,zloc,scale);
    }
    });
    temp = initTextures("images/snowflake.jpg");
    for(x = 0; x < snowFlakeCount; x++)
    {
        snowflakes[x].bindTexture(temp);
        snowflakes[x].illumMode(true);
        snowflakes[x].bindAnimation(snow);
        objects.push(snowflakes[x]);
    }
}


    // Grass/Ground?

        Ground = new Object(0, 0, 0, 0, 'ground');
        Ground.initGeometry(-0.3,0.09,0,39);
        Ground.prepare();
        var temp = initTextures("images/grass.jpg");
        Ground.bindTexture(temp);
        // Ground.bindAnimation(groundCheck);
        objects.push(Ground);
        groundRender = 0;



    gl.clearColor(0.4, 0.4, 0.4, 1.0);
    gl.enable(gl.DEPTH_TEST);
    // Draw the Scene
    Frames();

    install_Handler(document, "mouseup", handleUnClick);
    install_Handler(document, "mousemove", handleDrag);
    // If doing an animation need to add code to rotate our geometry

}

function initWebGLContext(aname) {
    gl = null;
    var canvas = document.getElementById(aname);
    try {
        // Try to grab the standard context. If it fails, fallback to experimental.
        gl = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
    } catch (e) {}

    // If we don't have a GL context, give up now
    if (!gl) {
        alert("Unable to initialize WebGL. Your browser may not support it.");
        gl = null;
    }
    gl.viewportWidth = canvas.width;
    gl.viewportHeight = canvas.height;
    install_Handler(canvas, "mousedown", handleCkick);
    install_Handler(canvas, "wheel", handleScroll);
    return gl;
}

function initGLScene() {
    // Initialize the WebGL Context - the gl engine for drawing things.
    var gl = initWebGLContext("hellowebgl"); // The id of the Canvas Element
    if (!gl) // if fails simply return
    {
        return;
    }
    // succeeded in initializing WebGL system
    return gl;
}

